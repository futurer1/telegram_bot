version: '3.8'

services:
  node:
    image: com.mikhail.telegram/node:latest
    container_name: node
    networks:
      - app-network
    build:
      context: ./node
      dockerfile: Dockerfile
      args:
        - APP_NAME=node
        - APP_VERSION=0.0.1
    env_file:
      - .env
      - rabbitmq.env
      - postgre.env
    depends_on:
      - db
      - rabbitmq
    expose:
      - '8085'
    ports:
      - '8085:8085'

  dispatcher:
    image: com.mikhail.telegram/dispatcher:latest
    container_name: dispatcher
    networks:
      - app-network
    build:
      context: ./dispatcher
      dockerfile: Dockerfile
      args:
        - APP_NAME=dispatcher
        - APP_VERSION=0.0.1
    env_file:
      - .env
      - rabbitmq.env
    depends_on:
      - db
      - rabbitmq
      - node
    expose:
      - '8084'
    ports:
      - '8084:8084'

  rest-service:
    image: com.mikhail.telegram/rest-service:latest
    container_name: rest-service
    networks:
      - app-network
    build:
      context: ./rest-service
      dockerfile: Dockerfile
      args:
        - APP_NAME=rest-service
        - APP_VERSION=0.0.1
    env_file:
      - .env
      - rabbitmq.env
      - postgre.env
    depends_on:
      - db
      - rabbitmq
      - dispatcher
      - node
    expose:
      - '8086'
    ports:
      - '8086:8086'

  mail-service:
    image: com.mikhail.telegram/mail-service:latest
    container_name: mail-service
    networks:
      - app-network
    build:
      context: ./mail-service
      dockerfile: Dockerfile
      args:
        - APP_NAME=mail-service
        - APP_VERSION=0.0.1
    env_file:
      - mail.env
      - rabbitmq.env
    depends_on:
      - db
      - rabbitmq
      - node
    expose:
      - '8087'
    ports:
      - '8087:8087'

  db:
    image: postgres:15.1-alpine
    container_name: postgres
    hostname: db
    restart: always
    networks:
      - app-network
    env_file:
      - postgre.env
    expose:
      - '5433'
    ports:
      - '5433:5432'
    volumes:
      - ./src/main/resources/db-init:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.10.6-management-alpine
    hostname: my-rabbitmq
    restart: always
    container_name: rabbitmq
    networks:
      - app-network
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 536870912
    ports:
      - '15672:15672'
      - '5673:5672'
    volumes:
      - './rabbitmq:/var/lib/rabbitmq/mnesia'
      - './rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro'
      - './rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro'

networks:
  app-network:
    driver: bridge

volumes:
  cache:
    driver: local
  db-data:
    driver: local
